# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `mhtml` gem.
# Please instead update this file by running `bin/tapioca gem mhtml`.

# source://mhtml//lib/mhtml.rb#2
module Mhtml
  class << self
    # source://mhtml//lib/mhtml.rb#11
    def is_mhtml(filename); end
  end
end

# source://mhtml//lib/mhtml.rb#5
Mhtml::DOUBLE_LINE_BREAK = T.let(T.unsafe(nil), String)

# source://mhtml//lib/mhtml/document.rb#5
class Mhtml::Document
  # @return [Document] a new instance of Document
  #
  # source://mhtml//lib/mhtml/document.rb#16
  def initialize(str = T.unsafe(nil)); end

  # source://mhtml//lib/mhtml/document.rb#43
  def <<(chunk); end

  # source://mhtml//lib/mhtml/document.rb#47
  def ==(other); end

  # Returns the value of attribute body.
  #
  # source://mhtml//lib/mhtml/document.rb#8
  def body; end

  # Sets the attribute body
  #
  # @param value the value to set the attribute body to.
  #
  # source://mhtml//lib/mhtml/document.rb#8
  def body=(_arg0); end

  # Returns the value of attribute chunked.
  #
  # source://mhtml//lib/mhtml/document.rb#6
  def chunked; end

  # Returns the value of attribute encoding.
  #
  # source://mhtml//lib/mhtml/document.rb#8
  def encoding; end

  # Sets the attribute encoding
  #
  # @param value the value to set the attribute encoding to.
  #
  # source://mhtml//lib/mhtml/document.rb#8
  def encoding=(_arg0); end

  # Returns the value of attribute file_path.
  #
  # source://mhtml//lib/mhtml/document.rb#8
  def file_path; end

  # Sets the attribute file_path
  #
  # @param value the value to set the attribute file_path to.
  #
  # source://mhtml//lib/mhtml/document.rb#8
  def file_path=(_arg0); end

  # source://mhtml//lib/mhtml/document.rb#60
  def header(key); end

  # Returns the value of attribute headers.
  #
  # source://mhtml//lib/mhtml/document.rb#8
  def headers; end

  # Sets the attribute headers
  #
  # @param value the value to set the attribute headers to.
  #
  # source://mhtml//lib/mhtml/document.rb#8
  def headers=(_arg0); end

  # Returns the value of attribute is_base_64.
  #
  # source://mhtml//lib/mhtml/document.rb#8
  def is_base_64; end

  # Sets the attribute is_base_64
  #
  # @param value the value to set the attribute is_base_64 to.
  #
  # source://mhtml//lib/mhtml/document.rb#8
  def is_base_64=(_arg0); end

  # Returns the value of attribute is_quoted_printable.
  #
  # source://mhtml//lib/mhtml/document.rb#8
  def is_quoted_printable; end

  # Sets the attribute is_quoted_printable
  #
  # @param value the value to set the attribute is_quoted_printable to.
  #
  # source://mhtml//lib/mhtml/document.rb#8
  def is_quoted_printable=(_arg0); end

  # source://mhtml//lib/mhtml/document.rb#56
  def on_body; end

  # source://mhtml//lib/mhtml/document.rb#52
  def on_header; end

  # Returns the value of attribute parser.
  #
  # source://mhtml//lib/mhtml/document.rb#6
  def parser; end

  # source://mhtml//lib/mhtml/document.rb#73
  def relative_file_path; end

  # Returns the value of attribute root_doc.
  #
  # source://mhtml//lib/mhtml/document.rb#8
  def root_doc; end

  # Sets the attribute root_doc
  #
  # @param value the value to set the attribute root_doc to.
  #
  # source://mhtml//lib/mhtml/document.rb#8
  def root_doc=(_arg0); end

  # for testing only = no spec implemented
  #
  # source://mhtml//lib/mhtml/document.rb#97
  def to_s; end

  private

  # source://mhtml//lib/mhtml/document.rb#169
  def decode(str); end

  # source://mhtml//lib/mhtml/document.rb#113
  def handle_body(inst, data); end

  # source://mhtml//lib/mhtml/document.rb#103
  def handle_header_field(inst, data); end

  # source://mhtml//lib/mhtml/document.rb#109
  def handle_header_value(inst, data); end

  # source://mhtml//lib/mhtml/document.rb#125
  def handle_message_begin(inst); end

  # source://mhtml//lib/mhtml/document.rb#128
  def handle_message_complete(inst); end

  # source://mhtml//lib/mhtml/document.rb#131
  def maybe_create_header; end
end

# source://mhtml//lib/mhtml.rb#9
Mhtml::FILE_EXTENSIONS = T.let(T.unsafe(nil), Array)

# source://mhtml//lib/mhtml/http_header.rb#2
class Mhtml::HttpHeader
  # @return [HttpHeader] a new instance of HttpHeader
  #
  # source://mhtml//lib/mhtml/http_header.rb#10
  def initialize(key_or_hash, value_lines = T.unsafe(nil)); end

  # source://mhtml//lib/mhtml/http_header.rb#33
  def ==(other); end

  # source://mhtml//lib/mhtml/http_header.rb#55
  def clone; end

  # Returns the value of attribute key.
  #
  # source://mhtml//lib/mhtml/http_header.rb#5
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  #
  # source://mhtml//lib/mhtml/http_header.rb#5
  def key=(_arg0); end

  # following methods are for debugging only - no spec implemented
  #
  # source://mhtml//lib/mhtml/http_header.rb#51
  def to_s; end

  # source://mhtml//lib/mhtml/http_header.rb#37
  def value(key); end

  # Returns the value of attribute values.
  #
  # source://mhtml//lib/mhtml/http_header.rb#5
  def values; end

  # Sets the attribute values
  #
  # @param value the value to set the attribute values to.
  #
  # source://mhtml//lib/mhtml/http_header.rb#5
  def values=(_arg0); end
end

# source://mhtml//lib/mhtml/http_header.rb#7
Mhtml::HttpHeader::KEY_VALUE_SEP = T.let(T.unsafe(nil), String)

# source://mhtml//lib/mhtml/http_header.rb#8
Mhtml::HttpHeader::VALUE_SEP = T.let(T.unsafe(nil), String)

# source://mhtml//lib/mhtml/http_header.rb#60
class Mhtml::HttpHeader::Value
  # str examples:
  # value
  # key="value"
  #
  # @return [Value] a new instance of Value
  #
  # source://mhtml//lib/mhtml/http_header.rb#66
  def initialize(str_or_hash); end

  # source://mhtml//lib/mhtml/http_header.rb#85
  def ==(other); end

  # source://mhtml//lib/mhtml/http_header.rb#98
  def clone; end

  # Returns the value of attribute key.
  #
  # source://mhtml//lib/mhtml/http_header.rb#61
  def key; end

  # following methods are for debugging only - no spec implemented
  #
  # source://mhtml//lib/mhtml/http_header.rb#90
  def to_s; end

  # Returns the value of attribute value.
  #
  # source://mhtml//lib/mhtml/http_header.rb#61
  def value; end
end

# source://mhtml//lib/mhtml.rb#4
Mhtml::LINE_BREAK = T.let(T.unsafe(nil), String)

# source://mhtml//lib/mhtml/root_document.rb#2
class Mhtml::RootDocument < ::Mhtml::Document
  # @return [RootDocument] a new instance of RootDocument
  #
  # source://mhtml//lib/mhtml/root_document.rb#7
  def initialize(str = T.unsafe(nil)); end

  # source://mhtml//lib/mhtml/root_document.rb#12
  def ==(other); end

  # Returns the value of attribute boundary.
  #
  # source://mhtml//lib/mhtml/root_document.rb#5
  def boundary; end

  # Sets the attribute boundary
  #
  # @param value the value to set the attribute boundary to.
  #
  # source://mhtml//lib/mhtml/root_document.rb#5
  def boundary=(_arg0); end

  # source://mhtml//lib/mhtml/root_document.rb#32
  def boundary_str; end

  # source://mhtml//lib/mhtml/root_document.rb#36
  def last_boundary_str; end

  # source://mhtml//lib/mhtml/root_document.rb#16
  def on_subdoc_begin; end

  # source://mhtml//lib/mhtml/root_document.rb#24
  def on_subdoc_body; end

  # source://mhtml//lib/mhtml/root_document.rb#28
  def on_subdoc_complete; end

  # source://mhtml//lib/mhtml/root_document.rb#20
  def on_subdoc_header; end

  # Returns the value of attribute sub_docs.
  #
  # source://mhtml//lib/mhtml/root_document.rb#5
  def sub_docs; end

  # Sets the attribute sub_docs
  #
  # @param value the value to set the attribute sub_docs to.
  #
  # source://mhtml//lib/mhtml/root_document.rb#5
  def sub_docs=(_arg0); end

  # for testing only = no spec implemented
  #
  # source://mhtml//lib/mhtml/root_document.rb#41
  def to_s; end

  private

  # source://mhtml//lib/mhtml/root_document.rb#113
  def create_chunked_subdoc; end

  # source://mhtml//lib/mhtml/root_document.rb#49
  def handle_body(inst, data); end

  # source://mhtml//lib/mhtml/root_document.rb#81
  def handle_chunked_body(chunk, is_last_part, is_last_subdoc); end
end

# source://mhtml//lib/mhtml/root_document.rb#3
Mhtml::RootDocument::BOUNDARY_PREFIX = T.let(T.unsafe(nil), String)

# source://mhtml//lib/mhtml.rb#7
Mhtml::STATUS_LINE = T.let(T.unsafe(nil), String)

# source://mhtml//lib/mhtml/version.rb#2
Mhtml::VERSION = T.let(T.unsafe(nil), String)

# source://mhtml//lib/string.rb#1
class String
  include ::Comparable

  # source://mhtml//lib/string.rb#3
  def each_index(x); end

  # source://mhtml//lib/string.rb#43
  def index_of_split(other); end

  # source://mhtml//lib/string.rb#54
  def rindex_of_split(other); end

  # source://mhtml//lib/string.rb#19
  def strip_other(str); end

  # source://mhtml//lib/string.rb#35
  def underscore; end
end
